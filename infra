#!/bin/bash

export $(cat infrastructure/.env)

##############################################
# Menu
##############################################
usage(){
echo "Counter App Dev Tools"

echo "Usage:"
echo "   infra command [arguments]"

echo "Available commands:"
echo "   init                  Initialize the infrastructure for the first time"
echo "   up                    Start the infrastructure"
echo "   down                  Stop infrastructure"
echo "   build [services?]     Build image for all or given services"
echo "   logs [services?]      View logs for all or given services"
echo "   restart [services?]   Restart all or given services"
echo "   sh [service]          Exec sh in the given service"
echo "   artisan [arguments?]  Exec artisan command in the worker service"
echo "   test [arguments?]     Run phpunit in the worker service"
echo "   composer [arguments?] Run composer in the composer service"
echo "   mysql                 Run mysql cli as root in the mysql service"
echo "   redis                 Run redis cli in the redis service"
echo "   help                  Print all the available commands"
echo"    release               Use release image"
echo"    local                 Use local image"
}

if [ $APP_ENV = "release" ];then
DOCKER=docker-compose.release.yaml
else
DOCKER=docker-compose.yaml
fi

runInit(){
   git clone $REPO ../$PROJECT$(date +"%d-%m-%Y")
   cp -R infra docker-compose.yaml docker-compose.release.yaml infrastructure ../$PROJECT/
   mkdir -p ../db-$ENV
   cd ../$PROJECT && touch .env

   runBuild image-nginx;runBuild image-php;runBuild image-worker
   sleep 10
   runDown
   runComposer
   sudo chmod -R 777 ./storage 
   runUp
   runArtisan key:generate
   runArtisan migrate
}

runInitRelease(){
   git clone $REPO ../$PROJECT$(date +"%d-%m-%Y")
   cp -R infra docker-compose.yaml docker-compose.release.yaml infrastructure ../$PROJECT/
   mkdir -p ../db-$ENV
   cd ../$PROJECT && touch .env

   runBuild image-nginx;runBuild image-php;runBuild image-worker
   sleep 10
   runDown
   runComposer
   sudo chmod -R 777 ./storage 
   runUpRelease
   runArtisan key:generate
   runArtisan migrate
}

runUp(){
   docker-compose up -d nginx
}

runUpRelease(){
   docker-compose -f $DOCKER up -d nginx
}

runDown(){
   docker-compose down
}

runRestart(){
   docker-compose restart $1 $2 $3 $4 $5   
}

runSh(){
   docker-compose exec $1 sh
}

runTest(){
   docker-compose exec worker sh -c "./vendor/bin/phpunit"
}


runBuild(){
   docker-compose -f $DOCKER build $2 $3
}

runArtisan(){
   docker-compose exec worker sh -c "php artisan $1"
}

runComposer(){
   docker-compose run composer sh -c "composer install"
   docker-compose run composer sh -c "composer dump-autoload"
   docker-compose run composer sh -c "chown -R ${DOCKER_COMPOSE_USER}:${DOCKER_COMPOSE_USER_GROUP} /app/vendor"
}

runLogs(){
   docker-compose logs -f $1 $2   
}

runMysql () {
   docker-compose exec mysql mysql -uroot
}

runRedis () {
   docker-compose exec redis redis-cli
}




if [ -z "$1" ]; then
    usage
fi

case "$1" in
   (init)
   if [ $APP_ENV = "release" ];then
      runInit 
      else
      runInitRelease
      fi
      exit 0
      ;;
   (up)
   if [ $APP_ENV = "release" ];then
      runUp 
      else
      runUpRelease
      fi
      exit 0
      ;;
   (down)
      runDown
      exit 0
      ;;
   (build)
      runBuild $2
      exit 0
      ;;
   (logs)
      runLogs $2 $3
      exit 0
      ;;
   (restart)
      runRestart $2 $3 $4
      exit 0
      ;;
   (sh)
      runSh $2
      exit 0
      ;;
   (artisan)
      runArtisan $2
      exit 0
      ;;
   (test)
      runTest
      exit 0
      ;;
   (composer)
      runComposer $2
      exit 0
      ;;
   (mysql)
      runMysql $2 $3 $4 $5
      exit 0
      ;;
   (redis)  
      runRedis $2 $3 $4
      exit 0
      ;;
   (help)
      usage
      exit 0
      ;;
   (release)
      runUpRelease
      exit 0
      ;;
   (local)
      runUp
      exit 0
      ;;
   (*)
      exit 1
      ;;
esac


